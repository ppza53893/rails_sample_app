q
exit
1 + 1
""
"foo"
"foo" + "bar"
"foo" + 1
name = "u.ohashi"
"#{name} ok"
puts "foo"
print "hoge"
print "hoge\raaaaa"
print "hoge\ra"
print "\e[38;2;20;100;40mhoge\e[0m"
'\n'
"\n"
"hogehuga".length
"hogehuga".__id
"hogehuga".__id__
"hogehuga".__ne__
"hogehuga".__add__
"a".empty?
"a".empty
"a".empty?
(puts "hoge")
(puts "hoge").nil?
!!0
["hoge"]
["hoge"].length
["hoge"].to_h
["hoge"].to_json()
["hoge"].reverse()
["hoge", "fuga"].reverse()
["hoge", "fuga"].sort!
[]
!![]
2<<32
2<<31
2<<100
os
1
s  ="huge"
s.nil?
nil.nil?
"aaaaaaaaa"[0]
def palindrome_tester(s)\
  if (!s.nil? && s == s.reverse)\
    puts "palindrome"\
  end\
else\
  puts "not palindrome\
  end\
  end\
  "\
end\
end\
\
palindrome_tester(nil)
def palindrome_tester(s)\
  if (!s.nil? && s == s.reverse)\
    puts "palindrome"\
  else\
    puts "not palindrome"\
  end\
end
palindrome_tester(nil)
palindrome_tester("aaaabbbbbaaaa")
a = 12345; b = "www"
a
b
0..10
0..10..2
0..10:2
0..10
(0..20).step(2) {|v| p v}
p "a"
a = %w[hoo bar baz]
a[0..2]
a[0..1]
a[(0..3).step(2)]
a[(0..3).step(2) {|v| v}]
\
\
  (0..3).step(2) {|v| v}
\
\
  (0..3).step(3) {|v| v}
\
\
  (0..10).step(3) {|v| v}
\
\
  (0..10).step(3) {|v|}
type
typeof
%w[a b c].map{|c| c.upcase}
%w[a b c].map{|c| c.upcase}.map{|c| c + "hoge"}
%w[a b c].map(&:downcase).map{|c| c + "hoge"}
('a' .. 'z').to_a.shuffle[0..7].join
('a' .. 'z').to_a.shuffle.join
('a' .. 'z').to_a.shuffle.join
('a' .. 'z').to_a.shuffle.join
s = ('a'..'q')
s
s = ('a'..'z')
s = ('a'..'z').to_a.join
s = ('a'..'q').to_a.join
s.split
s.split(1)
s.split("")
s.split("").shuffle.join
def string_shuffle(s)\
  s.split('').shuffle.join\
end
string_shuffle("haruwaakebono")
string_shuffle("haruwaakebono")
user = {}
user["hoge"] = fuga
user["hoge"] = %w[fuga]
user["hoge"]
user["fuga"] = "aaaaa"
user
user.hoge
user[2] = "ex"
user
user[:hoge]
user[:hoge] = "aieurp"
user
:name
{name: "ok"}
{name: "ok"} == {:name =>  "aaa"}
puts (1..5).to_a.inspect
string_shuffle "aaaadjspd"
ll
exit
(0..16).to_a.map{|v| v**2 }
String.new(1)
String.new("1")
Hash.new(:hoge)
Hash.new(0)
h[:foo]
h = Hash.new(0)
h[:foo]
Range.new(0, 10)
exit
require './example_user'
example = User.new
example.name
example.name = "Example User"
example
example.email = "hoge@hoge.com"
example
example.formatted_email
user = User.new(name: "u.ohashi", email: "u.ohashi@opt.ne.jp")
user.formatted_email
exit
User.new
user = User.new
user
user = User.new(name: "u.ohashi", email: "u.ohashi@opt.ne.jp")
user
user.valid?
user.valid
user.valid?
user.save
user
user.name
user.email
user.created_at
foo = User.create(name: "a.fuga", email: "e.fuga@efuga.jp")
foo.destroy
foo
User.find(1)
User.find(2)
User.find_by(email: "u.ohashi@opt.ne.jp")
User.first
User.all
user.email = "u.ohashi+1@opt.ne.jp"
user.save
User.first
exit
User.find_by(email: "u.ohashi@opt.ne.jp")
exit
User.all
user = User.create(name: "u.ohashi", email: "u.ohashi@opt.ne.jp")
user
user.email = "u.ohashi+1@opt.ne.jp"
user.save
User
User.all
User.first
exit
user = User.create(name: "u.ohashi", email: "u.ohashi@opt.ne.jp")
user.valid?
user.save
user = User.create(name: "", email: "u.ohashi@opt.ne.jp")
user.valid
user.valid?
exit
user = User.create(name: "", email: "u.ohashi@opt.ne.jp")
user.errors
user.errors.full_messages
user.save
exit
user = User.create(name: "u.ohashi", email: "u.ohashi@opt.ne.jp", password: "foobar", password_confirmatin: "foobar")
user = User.create(name: "u.ohashi", email: "u.ohashi@opt.ne.jp", password: "foobar", password_confirmation: "foobar")
user.valid?
user
user.password_digest
user.save
User
User.f
User.first.authenticate("hoge")?
User.first.authenticate("foobar")
!!User.first.authenticate("foobar")
exit
